define pred = fun (m : Nat) -> Ind (fun (n : Nat) -> Nat) (Z) (fun (n : Nat) -> fun (q : Nat) -> n )  m
define add = fun (q : Nat) -> fun (m : Nat) -> Ind (fun (n : Nat) -> Nat) (q) (fun (n : Nat) -> fun (nq : Nat) -> (S nq) )  m
define p = fun (x : Nat) -> fun (y : Nat) -> fun (e : Eq x y) -> Eq (S x) (S y)
define r = fun (x : Nat) -> Refl (S x)
define Seq = fun (x : Nat) -> fun (y : Nat) -> fun (e : Eq x y) -> J p r x y e
define addz = fun (n : Nat) -> Refl n
define p1 = fun (n : Nat) -> Eq (add Z n) n
define s1 = fun (x : Nat) -> fun (q : (p1 x)) -> Seq (add Z x) x q
define zadd = fun (n : Nat) -> Ind p1 (Refl Z) s1 n
define p2 = fun (n : Nat) -> (fun (x : Nat) -> Eq (add (S n) x) S(add n x) )
define s2 =  fun (n : Nat) -> fun (x : Nat) -> fun (q : p2 n x) -> Seq (add (S n) x) (S (add n x)) q 
define sadd = fun (n : Nat) -> fun (m : Nat) -> Ind (p2 n) (Refl S n) (s2 n) m
check sadd = Pi (x : Nat) -> Pi (y : Nat) -> Eq (add (S x) y) (S (add x y))
define assoc_p = fun (n : Nat) -> fun (m : Nat) -> fun (x : Nat) -> Eq (add (add n m) x) (add n (add m x))
define assoc_add = fun (n : Nat) -> fun (m : Nat) -> fun (q : Nat) -> Ind (assoc_p n m) (Refl (add n m)) (fun (x : Nat) -> fun (w : (assoc_p n m x)) -> Seq (add (add n m) x) (add n (add m x))  w) q
check assoc_add = Pi (x : Nat) -> Pi (y : Nat) -> Pi (z : Nat) -> Eq (add (add x y) z) (add x (add y z))
define ptrans = fun (x : Nat) -> fun (y : Nat) -> fun (e : Eq x y) -> (Pi (z : Nat) -> Pi (e : Eq y z) -> Eq x z )
define rtrans = fun (n : Nat) -> fun (z : Nat) -> fun (e : Eq n z) -> e
define trans = fun (n : Nat) -> fun (m : Nat) -> fun (u : Eq n m) -> (J ptrans rtrans n m u)
define comm_p = fun (n : Nat) -> fun (m : Nat) -> Eq (add m n) (add n m)
define comm_s = fun (n : Nat) -> fun (x : Nat) -> fun (q : (comm_p n x)) -> (trans (add (S x) n) (S (add x n)) (sadd x n) ) (add n (S x)) (Seq (add x n) (add n x) q) 
define comm_add = fun (n : Nat) -> fun (m : Nat) -> Ind (comm_p n) (zadd n) (comm_s n) m
check comm_add = Pi (n : Nat) -> Pi (m : Nat) -> Eq (add m n) (add n m)
define add_eq = fun (x : Nat) -> fun (y : Nat) -> fun (a : Nat) -> fun (e : Eq x y) -> Eq (add x a) (add y a)
define add_eq_p = fun (x : Nat) -> fun (y : Nat) -> fun (n : Nat) -> Eq (add x n) (add y n)
define add_eq_s = fun (x : Nat) -> fun (y : Nat) -> fun (n : Nat) -> fun (q : add_eq_p x y n) -> Seq (add x n) (add y n) q
define add_eq = fun (x : Nat) -> fun (y : Nat) -> fun (a : Nat) -> fun (e : Eq x y) -> Ind (add_eq_p x y) e (add_eq_s x y) a

type mul
define mul = fun (q : Nat) -> fun (m : Nat) -> Ind (fun (n : Nat) -> Nat) (Z) (fun (n : Nat) -> fun (nq : Nat) -> (add nq q) )  m

define dist_p = fun (n : Nat) -> fun (m : Nat) -> fun (q : Nat) ->  Eq (mul n (add m q)) (add (mul n m) (mul n q))
define dist_s = fun (n : Nat) -> fun (m : Nat) -> fun (q : Nat) ->  fun (p : dist_p n m q) -> trans (add (mul n (add m q)) q) (add (add (mul n m) (mul n q)) q) (add (mul n m) add((mul n q) q)) (assoc_add (mul n m) (mul n q) q )
define dist_s = fun (n : Nat) -> fun (m : Nat) -> fun (q : Nat) ->  fun (p : dist_p n m q) -> (trans (add (mul n (add m q)) q) (add (add (mul n m) (mul n q)) q) ) (add (mul n m) add((mul n q) q)) (assoc_add (mul n m) (mul n q) q )
